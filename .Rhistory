GoodForKids + RestaurantsTableService + RestaurantsGoodForGroups +
DriveThru + BusinessAcceptsBitcoin + GoodForDancing  +
BYOB + Open24Hours - 1,
data = train_data2)
#Ridge 1.1 regress stars on business_data
# Define predictors and response for Model 1
x1 <- model.matrix(~ latitude + longitude + business_stars + review_count + is_open+ ByAppointmentOnly + BusinessAcceptsCreditCards + BikeParking +
RestaurantsPriceRange2 + CoatCheck + RestaurantsTakeOut +
RestaurantsDelivery + Caters + WheelchairAccessible + HappyHour +
OutdoorSeating + HasTV + RestaurantsReservations + DogsAllowed +
GoodForKids + RestaurantsTableService + RestaurantsGoodForGroups +
DriveThru + BusinessAcceptsBitcoin + GoodForDancing  +
BYOB - 1,
data = train_data2)
#Ridge 1.1 regress stars on business_data
# Define predictors and response for Model 1
x1 <- model.matrix(~ latitude + longitude + business_stars + review_count + is_open+ ByAppointmentOnly + BusinessAcceptsCreditCards + BikeParking +
RestaurantsPriceRange2 + CoatCheck + RestaurantsTakeOut +
RestaurantsDelivery + Caters + WheelchairAccessible + HappyHour +
OutdoorSeating + HasTV + RestaurantsReservations + DogsAllowed +
GoodForKids + RestaurantsTableService + RestaurantsGoodForGroups +
DriveThru + BusinessAcceptsBitcoin + GoodForDancing  +
BYOB + Corkage- 1,
data = train_data2)  # '-1' to exclude intercept
#Ridge 1.1 regress stars on business_data
# Define predictors and response for Model 1
x1 <- model.matrix(~ latitude + longitude + business_stars + review_count + is_open+ ByAppointmentOnly + BusinessAcceptsCreditCards + BikeParking +
RestaurantsPriceRange2 + CoatCheck + RestaurantsTakeOut +
RestaurantsDelivery + Caters + WheelchairAccessible + HappyHour +
OutdoorSeating + HasTV + RestaurantsReservations + DogsAllowed +
GoodForKids + RestaurantsTableService + RestaurantsGoodForGroups +
DriveThru + BusinessAcceptsBitcoin + GoodForDancing + AcceptsInsurance +
BYOB + Corkage + Open24Hours + RestaurantsCounterService- 1,
data = train_data2)  # '-1' to exclude intercept
#Ridge 1.1 regress stars on business_data
# Define predictors and response for Model 1
x1 <- model.matrix(~ latitude + longitude + business_stars + review_count + is_open+ ByAppointmentOnly + BusinessAcceptsCreditCards + BikeParking +
RestaurantsPriceRange2 + CoatCheck + RestaurantsTakeOut +
RestaurantsDelivery + Caters + WheelchairAccessible + HappyHour +
OutdoorSeating + HasTV + RestaurantsReservations + DogsAllowed +
GoodForKids + RestaurantsTableService + RestaurantsGoodForGroups +
DriveThru + BusinessAcceptsBitcoin + GoodForDancing+ Open24Hours- 1,
data = train_data2)  # '-1' to exclude intercept
#Ridge 1.1 regress stars on business_data
# Define predictors and response for Model 1
x1 <- model.matrix(~ latitude + longitude + business_stars + review_count + is_open+ ByAppointmentOnly + BusinessAcceptsCreditCards + BikeParking +
RestaurantsPriceRange2 + CoatCheck + RestaurantsTakeOut +
RestaurantsDelivery + Caters + WheelchairAccessible + HappyHour +
OutdoorSeating + HasTV + RestaurantsReservations + DogsAllowed +
GoodForKids + RestaurantsTableService + Open24Hours- 1,
data = train_data2)  # '-1' to exclude intercept
#Ridge 1.1 regress stars on business_data
# Define predictors and response for Model 1
x1 <- model.matrix(~ latitude + longitude + business_stars + review_count + is_open+ ByAppointmentOnly + BusinessAcceptsCreditCards + BikeParking +
RestaurantsPriceRange2 + CoatCheck + RestaurantsTakeOut +
RestaurantsDelivery +Open24Hours- 1,
data = train_data2)  # '-1' to exclude intercept
#Ridge 1.1 regress stars on business_data
# Define predictors and response for Model 1
x1 <- model.matrix(~ latitude + longitude + business_stars + review_count + is_open+ ByAppointmentOnly + BusinessAcceptsCreditCards + BikeParking +
RestaurantsPriceRange2 + CoatCheck + RestaurantsTakeOut +
RestaurantsDelivery - 1,
data = train_data2)  # '-1' to exclude intercept
#Ridge 1.1 regress stars on business_data
# Define predictors and response for Model 1
x1 <- model.matrix(~ latitude + longitude + business_stars + review_count + is_open+ ByAppointmentOnly + BusinessAcceptsCreditCards + BikeParking +
RestaurantsPriceRange2 + CoatCheck + RestaurantsTakeOut +
RestaurantsDelivery + Caters + WheelchairAccessible + HappyHour +
OutdoorSeating + HasTV + RestaurantsReservations + DogsAllowed +
GoodForKids + RestaurantsTableService + RestaurantsGoodForGroups +
DriveThru + BusinessAcceptsBitcoin + GoodForDancing + AcceptsInsurance +
BYOB + Corkage + RestaurantsCounterService- 1,
data = train_data2)  # '-1' to exclude intercept
#Ridge 1.1 regress stars on business_data
# Define predictors and response for Model 1
x1 <- model.matrix(~ latitude + longitude + business_stars + review_count + is_open+ ByAppointmentOnly + BusinessAcceptsCreditCards + BikeParking +
RestaurantsPriceRange2 + CoatCheck + RestaurantsTakeOut +
RestaurantsDelivery + Caters + WheelchairAccessible + HappyHour +
OutdoorSeating + HasTV + RestaurantsReservations + DogsAllowed +
GoodForKids + RestaurantsTableService + RestaurantsGoodForGroups +
DriveThru + BusinessAcceptsBitcoin + GoodForDancing + AcceptsInsurance +
BYOB + Corkage + RestaurantsCounterService- 1,
data = train_data2)  # '-1' to exclude intercept
#Ridge 1.1 regress stars on business_data
# Define predictors and response for Model 1
x1 <- model.matrix(~ latitude + longitude + business_stars + review_count + is_open+ ByAppointmentOnly + BusinessAcceptsCreditCards + BikeParking +
RestaurantsPriceRange2 + CoatCheck + RestaurantsTakeOut +
RestaurantsDelivery + Caters + WheelchairAccessible + HappyHour +
OutdoorSeating + HasTV + RestaurantsReservations + DogsAllowed +
GoodForKids + RestaurantsTableService + RestaurantsGoodForGroups +
DriveThru + BusinessAcceptsBitcoin + GoodForDancing +
BYOB + Corkage + RestaurantsCounterService- 1,
data = train_data2)  # '-1' to exclude intercept
#Ridge 1.1 regress stars on business_data
# Define predictors and response for Model 1
x1 <- model.matrix(~ latitude + longitude + business_stars + review_count + is_open+ ByAppointmentOnly + BusinessAcceptsCreditCards + BikeParking +
RestaurantsPriceRange2 + CoatCheck + RestaurantsTakeOut +
RestaurantsDelivery + Caters + WheelchairAccessible + HappyHour +
OutdoorSeating + HasTV + RestaurantsReservations + DogsAllowed +
GoodForKids + RestaurantsTableService + RestaurantsGoodForGroups +
DriveThru + BusinessAcceptsBitcoin + GoodForDancing +
BYOB + RestaurantsCounterService- 1,
data = train_data2)  # '-1' to exclude intercept
#Ridge 1.1 regress stars on business_data
# Define predictors and response for Model 1
x1 <- model.matrix(~ latitude + longitude + business_stars + review_count + is_open+ ByAppointmentOnly + BusinessAcceptsCreditCards + BikeParking +
RestaurantsPriceRange2 + CoatCheck + RestaurantsTakeOut +
RestaurantsDelivery + Caters + WheelchairAccessible + HappyHour +
OutdoorSeating + HasTV + RestaurantsReservations + DogsAllowed +
GoodForKids + RestaurantsTableService + RestaurantsGoodForGroups +
DriveThru + BusinessAcceptsBitcoin + GoodForDancing +
BYOB- 1,
data = train_data2)  # '-1' to exclude intercept
#Ridge 1.1 regress stars on business_data
# Define predictors and response for Model 1
x1 <- model.matrix(~ latitude + longitude + business_stars + review_count + is_open+ ByAppointmentOnly + BusinessAcceptsCreditCards + BikeParking +
RestaurantsPriceRange2 + CoatCheck + RestaurantsTakeOut +
RestaurantsDelivery + Caters + WheelchairAccessible + HappyHour +
OutdoorSeating + HasTV +RestaurantsReservations + DogsAllowed +
GoodForKids + RestaurantsTableService + RestaurantsGoodForGroups +
DriveThru + BusinessAcceptsBitcoin + GoodForDancing + AcceptsInsurance +
BYOB + Corkage - 1,
data = train_data2)  # '-1' to exclude intercept
#Ridge 1.1 regress stars on business_data
# Define predictors and response for Model 1
x1 <- model.matrix(~ latitude + longitude + business_stars + review_count + is_open+ ByAppointmentOnly + BusinessAcceptsCreditCards + BikeParking +
RestaurantsPriceRange2 + CoatCheck + RestaurantsTakeOut +
RestaurantsDelivery + Caters + WheelchairAccessible + HappyHour +
OutdoorSeating + HasTV +RestaurantsReservations + DogsAllowed +
GoodForKids + RestaurantsTableService + RestaurantsGoodForGroups +
DriveThru + BusinessAcceptsBitcoin + GoodForDancing + AcceptsInsurance +
BYOB + Corkage + Open24Hours + RestaurantsCounterService- 1,
data = train_data2)  # '-1' to exclude intercept
#Ridge 1.1 regress stars on business_data
# Define predictors and response for Model 1
x1 <- model.matrix(~ latitude + longitude + business_stars + review_count + is_open+ ByAppointmentOnly + BusinessAcceptsCreditCards + BikeParking +
RestaurantsPriceRange2 + CoatCheck + RestaurantsTakeOut +
RestaurantsDelivery + Caters + WheelchairAccessible + HappyHour +
OutdoorSeating + HasTV +RestaurantsReservations + DogsAllowed +
GoodForKids + RestaurantsTableService + RestaurantsGoodForGroups +
DriveThru + BusinessAcceptsBitcoin + GoodForDancing + AcceptsInsurance +
BYOB + Corkage  + RestaurantsCounterService- 1,
data = train_data2)  # '-1' to exclude intercept
#Ridge 1.1 regress stars on business_data
# Define predictors and response for Model 1
x1 <- model.matrix(~ latitude + longitude + business_stars + review_count + is_open+ ByAppointmentOnly + BusinessAcceptsCreditCards + BikeParking +
RestaurantsPriceRange2 + CoatCheck + RestaurantsTakeOut +
RestaurantsDelivery + Caters + WheelchairAccessible + HappyHour +
OutdoorSeating + HasTV +RestaurantsReservations + DogsAllowed +
GoodForKids + RestaurantsTableService + RestaurantsGoodForGroups +
DriveThru + BusinessAcceptsBitcoin + GoodForDancing + AcceptsInsurance +
BYOB - 1,
data = train_data2)  # '-1' to exclude intercept
#Ridge 1.1 regress stars on business_data
# Define predictors and response for Model 1
x1 <- model.matrix(~ latitude + longitude + business_stars + review_count + is_open+ ByAppointmentOnly + BusinessAcceptsCreditCards + BikeParking +
RestaurantsPriceRange2 + CoatCheck + RestaurantsTakeOut +
RestaurantsDelivery + Caters + WheelchairAccessible + HappyHour +
OutdoorSeating + HasTV +RestaurantsReservations + DogsAllowed +
GoodForKids + RestaurantsTableService + RestaurantsGoodForGroups +
DriveThru + BusinessAcceptsBitcoin + GoodForDancing- 1,
data = train_data2)  # '-1' to exclude intercept
#Ridge 1.1 regress stars on business_data
# Define predictors and response for Model 1
x1 <- model.matrix(~ latitude + longitude + business_stars + review_count + is_open+ ByAppointmentOnly + BusinessAcceptsCreditCards + BikeParking +
RestaurantsPriceRange2 + CoatCheck + RestaurantsTakeOut +
RestaurantsDelivery + Caters + WheelchairAccessible + HappyHour +
OutdoorSeating + HasTV +RestaurantsReservations + DogsAllowed +
GoodForKids + RestaurantsTableService + RestaurantsGoodForGroups +
DriveThru + BusinessAcceptsBitcoin + GoodForDancing + AcceptsInsurance +
BYOB + Corkage + Open24Hours + RestaurantsCounterService- 1,
data = train_data2)  # '-1' to exclude intercept
#Ridge 1.1 regress stars on business_data
# Define predictors and response for Model 1
x1 <- model.matrix(~ latitude + longitude + business_stars + review_count + is_open+ ByAppointmentOnly + BusinessAcceptsCreditCards + BikeParking +
RestaurantsPriceRange2 + CoatCheck + RestaurantsTakeOut +
RestaurantsDelivery + Caters + WheelchairAccessible + HappyHour +
OutdoorSeating + HasTV +RestaurantsReservations + DogsAllowed +
GoodForKids + RestaurantsTableService + RestaurantsGoodForGroups +
DriveThru + BusinessAcceptsBitcoin + GoodForDancing + AcceptsInsurance +
BYOB + Corkage + RestaurantsCounterService- 1,
data = train_data2)  # '-1' to exclude intercept
#Ridge 1.1 regress stars on business_data
# Define predictors and response for Model 1
x1 <- model.matrix(~ latitude + longitude + business_stars + review_count + is_open+ ByAppointmentOnly + BusinessAcceptsCreditCards + BikeParking +
RestaurantsPriceRange2 + CoatCheck + RestaurantsTakeOut +
RestaurantsDelivery + Caters + WheelchairAccessible + HappyHour +
OutdoorSeating + HasTV +RestaurantsReservations + DogsAllowed +
GoodForKids + RestaurantsTableService + RestaurantsGoodForGroups +
DriveThru + BusinessAcceptsBitcoin + GoodForDancing + AcceptsInsurance +
BYOB + RestaurantsCounterService- 1,
data = train_data2)  # '-1' to exclude intercept
#Ridge 1.1 regress stars on business_data
# Define predictors and response for Model 1
x1 <- model.matrix(~ latitude + longitude + business_stars + review_count + is_open+ ByAppointmentOnly + BusinessAcceptsCreditCards + BikeParking +
RestaurantsPriceRange2 + CoatCheck + RestaurantsTakeOut +
RestaurantsDelivery + Caters + WheelchairAccessible + HappyHour +
OutdoorSeating + HasTV +RestaurantsReservations + DogsAllowed +
GoodForKids + RestaurantsTableService + RestaurantsGoodForGroups +
DriveThru + BusinessAcceptsBitcoin + GoodForDancing + AcceptsInsurance +
RestaurantsCounterService- 1,
data = train_data2)  # '-1' to exclude intercept
#Ridge 1.1 regress stars on business_data
# Define predictors and response for Model 1
x1 <- model.matrix(~ latitude + longitude + business_stars + review_count + is_open+ ByAppointmentOnly + BusinessAcceptsCreditCards + BikeParking +
RestaurantsPriceRange2 + CoatCheck + RestaurantsTakeOut +
RestaurantsDelivery + Caters + WheelchairAccessible + HappyHour +
OutdoorSeating + HasTV +RestaurantsReservations + DogsAllowed +
GoodForKids + RestaurantsTableService + RestaurantsGoodForGroups +
DriveThru + BusinessAcceptsBitcoin + GoodForDancing  +
RestaurantsCounterService- 1,
data = train_data2)  # '-1' to exclude intercept
#Ridge 1.1 regress stars on business_data
# Define predictors and response for Model 1
x1 <- model.matrix(~ latitude + longitude + business_stars + review_count + is_open+ ByAppointmentOnly + BusinessAcceptsCreditCards + BikeParking +
RestaurantsPriceRange2 + CoatCheck + RestaurantsTakeOut +
RestaurantsDelivery + Caters + WheelchairAccessible + HappyHour +
OutdoorSeating + HasTV +RestaurantsReservations + DogsAllowed +
GoodForKids + RestaurantsTableService + RestaurantsGoodForGroups +
DriveThru + BusinessAcceptsBitcoin  +
RestaurantsCounterService- 1,
data = train_data2)  # '-1' to exclude intercept
#Ridge 1.1 regress stars on business_data
# Define predictors and response for Model 1
x1 <- model.matrix(~ latitude + longitude + business_stars + review_count + is_open+ ByAppointmentOnly + BusinessAcceptsCreditCards + BikeParking +
RestaurantsPriceRange2 + CoatCheck + RestaurantsTakeOut +
RestaurantsDelivery + Caters + WheelchairAccessible + HappyHour +
OutdoorSeating + HasTV +RestaurantsReservations + DogsAllowed +
GoodForKids + RestaurantsTableService + RestaurantsGoodForGroups +
DriveThru + BusinessAcceptsBitcoin- 1,
data = train_data2)  # '-1' to exclude intercept
#Ridge 1.1 regress stars on business_data
# Define predictors and response for Model 1
x1 <- model.matrix(~ latitude + longitude + business_stars + review_count + is_open+ ByAppointmentOnly + BusinessAcceptsCreditCards + BikeParking +
RestaurantsPriceRange2 + CoatCheck + RestaurantsTakeOut +
RestaurantsDelivery + Caters + WheelchairAccessible + HappyHour +
OutdoorSeating + HasTV +RestaurantsReservations + DogsAllowed +
GoodForKids + RestaurantsTableService + RestaurantsGoodForGroups +
DriveThru + BusinessAcceptsBitcoin + GoodForDancing + AcceptsInsurance +
BYOB + Corkage  + RestaurantsCounterService- 1,
data = train_data2)  # '-1' to exclude intercept
#Ridge 1.1 regress stars on business_data
# Define predictors and response for Model 1
x1 <- model.matrix(~ latitude + longitude + business_stars + review_count + is_open+ ByAppointmentOnly + BusinessAcceptsCreditCards + BikeParking +
RestaurantsPriceRange2 + CoatCheck + RestaurantsTakeOut +
RestaurantsDelivery + Caters + WheelchairAccessible + HappyHour +
OutdoorSeating + HasTV +RestaurantsReservations + DogsAllowed +
GoodForKids + RestaurantsTableService + RestaurantsGoodForGroups +
DriveThru + BusinessAcceptsBitcoin + GoodForDancing + AcceptsInsurance +
BYOB + Corkage- 1,
data = train_data2)  # '-1' to exclude intercept
#Ridge 1.1 regress stars on business_data
# Define predictors and response for Model 1
x1 <- model.matrix(~ latitude + longitude + business_stars + review_count + is_open+ ByAppointmentOnly + BusinessAcceptsCreditCards + BikeParking +
RestaurantsPriceRange2 + CoatCheck + RestaurantsTakeOut +
RestaurantsDelivery + Caters + WheelchairAccessible + HappyHour +
OutdoorSeating + HasTV +RestaurantsReservations + DogsAllowed +
GoodForKids + RestaurantsTableService + RestaurantsGoodForGroups +
DriveThru + BusinessAcceptsBitcoin + GoodForDancing +
BYOB + Corkage- 1,
data = train_data2)  # '-1' to exclude intercept
View(x1)
x1 <- model.matrix(~ ByAppointmentOnly + BusinessAcceptsCreditCards + BikeParking +
RestaurantsPriceRange2 + CoatCheck + RestaurantsTakeOut +
RestaurantsDelivery + Caters + WheelchairAccessible + HappyHour +
OutdoorSeating + HasTV +RestaurantsReservations + DogsAllowed +
GoodForKids + RestaurantsTableService + RestaurantsGoodForGroups +
DriveThru + BusinessAcceptsBitcoin + GoodForDancing + AcceptsInsurance +
BYOB + Corkage + Open24Hours + RestaurantsCounterService -1 ,
data=tarin_data2)
x1 <- model.matrix(~ ByAppointmentOnly + BusinessAcceptsCreditCards + BikeParking +
RestaurantsPriceRange2 + CoatCheck + RestaurantsTakeOut +
RestaurantsDelivery + Caters + WheelchairAccessible + HappyHour +
OutdoorSeating + HasTV +RestaurantsReservations + DogsAllowed +
GoodForKids + RestaurantsTableService + RestaurantsGoodForGroups +
DriveThru + BusinessAcceptsBitcoin + GoodForDancing + AcceptsInsurance +
BYOB + Corkage + Open24Hours + RestaurantsCounterService -1 ,
data=train_data2)
x1 <- model.matrix(~ ByAppointmentOnly + BusinessAcceptsCreditCards + BikeParking +
RestaurantsPriceRange2 + CoatCheck + RestaurantsTakeOut +
RestaurantsDelivery + Caters + WheelchairAccessible + HappyHour +
OutdoorSeating + HasTV +RestaurantsReservations + DogsAllowed +
GoodForKids + RestaurantsTableService + RestaurantsGoodForGroups +
DriveThru + BusinessAcceptsBitcoin + GoodForDancing + AcceptsInsurance +
BYOB + Corkage + RestaurantsCounterService -1 ,
data=train_data2)
#Logit
# 2.1 regress stars on variables from business_data
logit_model21 <- polr(stars ~ latitude + longitude + business_stars + review_count + is_open+ByAppointmentOnly + BusinessAcceptsCreditCards + BikeParking+
RestaurantsPriceRange2 + CoatCheck + RestaurantsTakeOut +
RestaurantsDelivery + Caters + WheelchairAccessible + HappyHour +
OutdoorSeating + HasTV + RestaurantsReservations + DogsAllowed +
GoodForKids + RestaurantsTableService + RestaurantsGoodForGroups +
DriveThru + BusinessAcceptsBitcoin + GoodForDancing+ AcceptsInsurance +
BYOB + Corkage + Open24Hours + RestaurantsCounterService,
data = train_data2, method = 'logistic')
#Ridge 1.1 regress stars on business_data
# Define predictors and response for Model 1
x1 <- model.matrix(~ latitude + longitude + business_stars + review_count + is_open+ ByAppointmentOnly + BusinessAcceptsCreditCards + BikeParking +
RestaurantsPriceRange2 + CoatCheck + RestaurantsTakeOut +
RestaurantsDelivery + Caters + WheelchairAccessible + HappyHour +
OutdoorSeating + HasTV +RestaurantsReservations + DogsAllowed +
GoodForKids + RestaurantsTableService + RestaurantsGoodForGroups +
DriveThru + BusinessAcceptsBitcoin + GoodForDancing +
BYOB + Corkage- 1,
data = train_data2)  # '-1' to exclude intercept
# Fit ridge regression model
ridge_model1 <- glmnet(x1, y1, alpha = 0)  # alpha = 0 for ridge regression
#Ridge 1.1 regress stars on business_data
# Define predictors and response for Model 1
x1 <- model.matrix(~ latitude + longitude + business_stars + review_count + is_open- 1,
data = train_data2)  # '-1' to exclude intercept
y1 <- train_data2$stars
# Fit ridge regression model
ridge_model1 <- glmnet(x1, y1, alpha = 0)  # alpha = 0 for ridge regression
# Convert 'stars' to factor in for train and test data 2 if using logit
train_data2$stars <- factor(train_data2$stars, levels = c(1, 2, 3, 4, 5), ordered = TRUE)
test_data2$stars <- factor(test_data2$stars, levels = c(1, 2, 3, 4, 5), ordered = TRUE)
#Logit
# 2.1 regress stars on variables from business_data
logit_model21 <- polr(stars ~ latitude + longitude + business_stars + review_count + is_open+ByAppointmentOnly + BusinessAcceptsCreditCards + BikeParking+
RestaurantsPriceRange2 + CoatCheck + RestaurantsTakeOut +
RestaurantsDelivery + Caters + WheelchairAccessible + HappyHour +
OutdoorSeating + HasTV + RestaurantsReservations + DogsAllowed +
GoodForKids + RestaurantsTableService + RestaurantsGoodForGroups +
DriveThru + BusinessAcceptsBitcoin + GoodForDancing+ AcceptsInsurance +
BYOB + Corkage + Open24Hours + RestaurantsCounterService,
data = train_data2, method = 'logistic')
#Logit
# 2.1 regress stars on variables from business_data
logit_model21 <- polr(stars ~ latitude + longitude + business_stars + review_count + is_open,
data = train_data2, method = 'logistic')
summary(logit_model21)
# 2.2 regress stars on variables from review_data_small
logit_model22 <- polr(stars ~ useful + funny + cool, data = train_data2, method = 'logistic')
summary(logit_model22)
# 2.3 regress stars on variables from user_data_small
logit_model23 <-polr(stars ~ user_review_count + user_useful + user_funny+ user_cool + fans
+ average_stars + compliment_hot + compliment_more+ compliment_profile+
compliment_cute + compliment_list+compliment_note+compliment_plain+
compliment_cool+compliment_funny+compliment_writer+compliment_photos
, data = train_data2, method = 'logistic')
summary(logit_model23)
summary(review_data_small$useful)
summary(review_data_small$funny)
summary(review_data_small$cool)
# 2.3 regress stars on variables from user_data_small
logit_model23 <-polr(stars ~ user_review_count + user_useful + user_funny+ user_cool + fans
+ average_stars + compliment_hot + compliment_more+ compliment_profile+
compliment_cute + compliment_list+compliment_note+compliment_plain+
compliment_cool+compliment_funny+compliment_writer+compliment_photos
, data = train_data2, method = 'logistic')
logit_model211 <- polr(stars~ByAppointmentOnly + BusinessAcceptsCreditCards + BikeParking+
RestaurantsPriceRange2 + CoatCheck + RestaurantsTakeOut +
RestaurantsDelivery + Caters + WheelchairAccessible + HappyHour +
OutdoorSeating + HasTV + RestaurantsReservations + DogsAllowed +
GoodForKids + RestaurantsTableService + RestaurantsGoodForGroups +
DriveThru + BusinessAcceptsBitcoin + GoodForDancing+ AcceptsInsurance +
BYOB + Corkage + Open24Hours + RestaurantsCounterService,
data = train_data2, method = 'logistic')
logit_model211 <- polr(stars~ByAppointmentOnly + BusinessAcceptsCreditCards + BikeParking+
RestaurantsPriceRange2 + CoatCheck + RestaurantsTakeOut +
RestaurantsDelivery + Caters + WheelchairAccessible + HappyHour +
OutdoorSeating + HasTV + RestaurantsReservations + DogsAllowed +
GoodForKids + RestaurantsTableService + RestaurantsGoodForGroups +
DriveThru + BusinessAcceptsBitcoin + GoodForDancing +
BYOB + Corkage,
data = train_data2, method = 'logistic')
summary(logit_model211)
#checking for multicollinearity due to error/warning in logit_model211
# Install and load the necessary package
install.packages("car")
#checking for multicollinearity due to error/warning in logit_model211
# Install and load the necessary package
install.packages("car")
install.packages("car")
library(car)
# Fit a linear model (as an approximation for multicollinearity check)
lm_model211 <- lm(stars ~ ByAppointmentOnly + BusinessAcceptsCreditCards + BikeParking +
RestaurantsPriceRange2 + CoatCheck + RestaurantsTakeOut +
RestaurantsDelivery + Caters + WheelchairAccessible + HappyHour +
OutdoorSeating + HasTV + RestaurantsReservations + DogsAllowed +
GoodForKids + RestaurantsTableService + RestaurantsGoodForGroups +
DriveThru + BusinessAcceptsBitcoin + GoodForDancing +
BYOB + Corkage,
data = train_data2)
# Calculate VIF
vif_values <- vif(lm_model211)
# Select the relevant columns for the correlation matrix
# Replace the column names with the actual names of your variables
selected_columns <- c("ByAppointmentOnly", "BusinessAcceptsCreditCards", "BikeParking",
"RestaurantsPriceRange2", "CoatCheck", "RestaurantsTakeOut",
"RestaurantsDelivery", "Caters", "WheelchairAccessible",
"HappyHour", "OutdoorSeating", "HasTV", "RestaurantsReservations",
"DogsAllowed", "GoodForKids", "RestaurantsTableService",
"RestaurantsGoodForGroups", "DriveThru", "BusinessAcceptsBitcoin",
"GoodForDancing", "BYOB", "Corkage")
# Extract the relevant columns from the data frame
correlation_data <- train_data2[, selected_columns]
# Calculate the correlation matrix
correlation_matrix <- cor(correlation_data, use = "complete.obs")
# Calculate standard deviations for each variable
std_devs <- apply(correlation_data, 2, sd)
# Identify variables with zero variance
constant_vars <- names(std_devs[std_devs == 0])
# Print out constant variables
print(constant_vars)
# Remove constant variables from the dataset
correlation_data <- correlation_data[, !(names(correlation_data) %in% constant_vars)]
# Recalculate the correlation matrix without constant variables
correlation_matrix <- cor(correlation_data, use = "complete.obs")
model1_data <- review_data_small %>%
left_join(user_data_small, by = "user_id") %>%
left_join(business_data %>%
mutate(DriveThru = attributes$DriveThru,
Open24Hours = attributes$Open24Hours), by = "business_id")
library(dplyr)
model1_data <- review_data_small %>%
left_join(user_data_small, by = "user_id") %>%
left_join(business_data %>%
mutate(DriveThru = attributes$DriveThru,
Open24Hours = attributes$Open24Hours), by = "business_id")
model1_data <- model1_data %>%
mutate(DriveThru = ifelse(is.na(attributes$DriveThru), NA, attributes$DriveThru),
Open24Hours = ifelse(is.na(attributes$Open24Hours), NA, attributes$Open24Hours))
model1_data <- model1_data %>%
dplyr::select(`stars`, `average_stars`, `business_stars`, `DriveThru`, `Open24Hours`)
model1_data <- model1_data %>%
mutate(
Open24Hours = case_when(
Open24Hours == "True" ~ 1,
Open24Hours == "False" ~ 0,
TRUE ~ NA_real_  # Assign NA for any other case
),
DriveThru = case_when(
DriveThru == "True" ~ 1,
DriveThru == "False" ~ 0,
DriveThru == "None" ~ NA_real_,  # Assign NA for "None"
TRUE ~ NA_real_  # Assign NA for any other case
)
)
library(caret)
# Splitting the data, with the test dataset containing 10,000 observations
install.packages('caret')
library(caret)
set.seed(1)
train <- sample(1:nrow(model1_data),nrow(model1_data)-10000)
train_data<-model1_data[train,]
test_data<-model1_data[-train,]
# Making 'stars' ordered as it needs to be a factor
train_data$stars <- factor(train_data$stars, levels = c(1, 2, 3, 4, 5), ordered = TRUE)
test_data$stars <- factor(test_data$stars, levels = c(1, 2, 3, 4, 5), ordered = TRUE)
library(MASS)
logit_model11 <- polr(stars ~ average_stars + business_stars + Open24Hours, data = train_data, method = 'logistic')
summary(logit_model11)
logit_model12<- polr(stars ~ average_stars + business_stars + DriveThru, data = train_data, method = 'logistic')
summary(logit_model12)
logit_model11 <- polr(stars ~ average_stars + business_stars + Open24Hours, data = train_data, method = 'logistic')
logit_model12<- polr(stars ~ average_stars + business_stars + DriveThru, data = train_data, method = 'logistic')
logit_model13 <- polr(stars ~ average_stars + business_stars + DriveThru + Open24Hours, data = train_data, method = 'logistic')
logit_model14 <- polr(stars ~ average_stars + business_stars, data = train_data, method = 'logistic')
logit_model15 <- polr(stars ~ average_stars, data = train_data, method = 'logistic')
logit_model16 <- polr(stars ~ business_stars, data = train_data, method = 'logistic')
summary(logit_model11)
summary(logit_model12)
summary(logit_model13)
summary(logit_model14)
summary(logit_model15)
summary(logit_model16)
library(caret)
# Splitting the data, with the test dataset containing 10,000 observations
install.packages('caret')
library(caret)
# logit_model11
#predict most likely class
test_predictions11 <- predict(logit_model11, newdata = test_data, type = "class")
#accuracy
accuracy11 <- sum(test_predictions11 == test_data$stars) / nrow(test_data)
#ensuring test_predictions11 has the same levels as test_data$stars
test_predictions11 <- factor(test_predictions11, levels = levels(test_data$stars))
#accuracy
accuracy11 <- sum(test_predictions11 == test_data$stars) / nrow(test_data)
# Check the structure of the predictions and actual values
str(test_predictions11)
str(test_data$stars)
# Convert test_predictions11 to an ordered factor
test_predictions11 <- factor(test_predictions11,
levels = levels(test_data$stars),
ordered = TRUE)
accuracy11 <- sum(test_predictions11 == test_data$stars) / nrow(test_data)
print(accuracy11)
#confusion matrix
confusionMatrix(test_predictions11, test_data$stars)
# Calculate accuracy excluding NA values
valid_cases <- !is.na(test_predictions11) & !is.na(test_data$stars)
accuracy11 <- sum(test_predictions11[valid_cases] == test_data$stars[valid_cases]) / sum(valid_cases)
print(accuracy11)
#compare to baseline
#most common class in the traindata
most_common_class <- names(sort(table(train_data$stars), decreasing = TRUE))[1]
# Create baseline predictions
baseline_predictions <- rep(most_common_class, nrow(test_data))
# Calculate baseline accuracy
baseline_accuracy <- sum(baseline_predictions == test_data$stars) / nrow(test_data)
print(baseline_accuracy)
library(caret)
install.packages("Matrix")
install.packages("Matrix")
install.packages("caret")
library(caret)
save.image(file = "my_workspace.RData")
library(caret)
